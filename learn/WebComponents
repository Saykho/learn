# Web Components — это набор стандартов веб-платформы, который позволяет создавать переиспользуемые, инкапсулированные и самостоятельные HTML-теги для веб-страниц и приложений.

Проще говоря, это технология, которая дает разработчикам возможность расширять стандартный HTML, создавая свои собственные элементы с собственной логикой и стилями, которые не будут конфликтовать с остальной частью страницы.

## Ключевые концепции
Web Components состоят из трех основных технологий, которые можно использовать вместе или по отдельстве:

1. Custom Elements (Пользовательские элементы)

Это основа. Позволяет определять свои собственные HTML-теги (например, <my-button>, <user-card>, <fancy-slider>).

Вы регистрируете свой элемент в JavaScript, а затем можете использовать его в разметке как любой обычный тег.

2. Shadow DOM (Теневой DOM)

Решает проблему инкапсуляции. Он создает изолированное DOM-дерево для вашего компонента, которое отделено от основного DOM документа.

Стили внутри Shadow DOM не просачиваются наружу, а внешние стили не влияют на внутренности компонента. Это делает компонент по-настоящему независимым.

3. HTML Templates (Шаблоны)

Элементы <template> и <slot> позволяют объявлять фрагменты разметки, которые не отображаются на странице при загрузке. Они предназначены для многократного использования в качестве основы для структуры компонента.

<slot> — это своего рода "дырка" в шаблоне, в которую можно вставлять пользовательский контент.

## Простой пример
1. HTML (Разметка)
Мы просто используем наш будущий компонент в коде.
```
<user-card
  name="Иван Петров"
  avatar="/ivan.jpg">
    <p>Любит веб-компоненты и кофе.</p>
</user-card>
```

2. JavaScript (Определение компонента)
```
// Создаем класс, который наследуется от HTMLElement
class UserCard extends HTMLElement {
  constructor() {
    super();

    // Создаем Shadow DOM для инкапсуляции
    const shadow = this.attachShadow({ mode: 'open' });

    // Создаем шаблон с помощью строки
    const template = `
      <style>
        /* Эти стили изолированы внутри компонента! */
        .card {
          font-family: 'Arial', sans-serif;
          background: #f4f4f4;
          padding: 20px;
          border: 1px solid #ccc;
          border-radius: 5px;
          max-width: 300px;
        }
        img { width: 100%; }
        h3 { color: darkblue; }
      </style>

      <div class="card">
        <img src="${this.getAttribute('avatar')}">
        <h3>${this.getAttribute('name')}</h3>
        <!-- Слот для пользовательского контента -->
        <div class="info"><slot></slot></div>
      </div>
    `;

    // Добавляем наш шаблон в Shadow DOM
    shadow.innerHTML = template;
  }
}

// Регистрируем наш новый элемент в браузере
// Важно: имя тега ДОЛЖНО содержать дефис!
customElements.define('user-card', UserCard);
```
## Преимущества Web Components
1. Переиспользуемость: Создайте один раз — используйте где угодно в любом проекте.

2. Инкапсуляция: Shadow DOM защищает стили и структуру компонента от внешних вмешательств и наоборот.

3. Интероперабельность (Совместимость): Веб-компоненты работают с любым фреймворком (React, Vue, Angular) или вообще без него, потому что это нативный стандарт браузера.

4. Долговечность: Будучи стандартом веб-платформы, они не устареют с выходом новой версии фреймворка.

5. Управление состоянием: Не навязывают никакой конкретной архитектуры управления состоянием, вы можете выбирать подходящую.

## Недостатки и сложности
1. SEO: Содержимое внутри Shadow DOM может быть не так хорошо проиндексировано некоторыми поисковыми системами (хотя ситуация улучшается).

2. Серверный рендеринг (SSR): Нативная поддержка SSR для веб-компонентов все еще развивается и сложнее, чем для фреймворков.

3. Коммуникация между компонентами: Нет встроенной системы, как, например, props в React. Приходится использовать атрибуты, события или другие паттерны.

4. "Сырость" API: Нативные API иногда могут быть более многословными по сравнению с фреймворками.
